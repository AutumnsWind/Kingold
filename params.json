{"name":"Slim框架","tagline":"适合用来快速写一些对性能要求不高的程序。","body":"LeiPHP 微型的PHP框架\r\n==============\r\n\r\n此框架仅有一个文件，其中包含了MySQL数据库、上传文件、调试信息、导入依赖文件、\r\n模板和REST路由等一系列常用操作。适合用来快速写一些对性能要求不高的程序。\r\n\r\n\r\n初始化\r\n=============\r\n\r\n首先新建一个`config.inc.php`文件，所有程序通过加载该文件来进行配置及初始化：\r\n\r\n```php\r\n<?php\r\n/**\r\n * 配置文件\r\n */\r\n\r\n// 当前应用的根目录\r\ndefine('APP_ROOT', dirname(__FILE__ ).'/');\r\n// 模板根目录\r\ndefine('APP_TEMPLATE_ROOT', APP_ROOT.'template/');\r\n\r\n\r\n// 输出调试信息，生成环境请去掉这行或设置为false\r\ndefine('APP_DEBUG', true);\r\n\r\n\r\n// MYSQL数据库配置，如果不定义数据库配置，则不自动连接数据库\r\ndefine('CONF_MYSQL_SERVER', 'localhost:3306');  // 服务器，默认为 localhost:3306\r\ndefine('CONF_MYSQL_USER',   'root');            // 用户名，默认为 root\r\ndefine('CONF_MYSQL_PASSWD', '123456');          // 密码，默认为空\r\ndefine('CONF_MYSQL_DBNAME', 'test');            // 数据库名，默认为空\r\ndefine('CONF_MYSQL_PERMANENT', false);          // 使用使用永久连接，默认false\r\n\r\n\r\n// 载入leiphp并初始化\r\nrequire(APP_ROOT.'leiphp.php');\r\nAPP::init();\r\n?>\r\n```\r\n\r\n在所有php程序中，均可载入`config.inc.php`文件唉实现初始化leiphp：\r\n\r\n```php\r\n<?php\r\nrequire('config.inc.php');\r\n// ...\r\n?>\r\n```\r\n\r\n\r\nREST路由\r\n===========\r\n\r\nleiphp可以根据不同的请求方法来调用相应的处理函数完成请求，比如：\r\n\r\n```php\r\n<?php\r\nrequire('config.inc.php');\r\n\r\n// 这里是公共部分的代码，所有请求方法都会执行下面的代码\r\necho '所有请求方法都会执行这里的代码';\r\n\r\n// 定义处理GET请求的代码\r\nfunction method_get () {\r\n  echo 'GET请求方法的处理代码';\r\n}\r\n\r\n// 定义处理POST请求的代码\r\nfunction method_post () {\r\n  echo 'POST请求方法的处理代码';\r\n}\r\n\r\n// 定义处理DELETE请求的代码\r\nfunction method_delete () {\r\n  echo 'DELETE请求方法的处理代码';\r\n}\r\n\r\n// 定义处理PUT请求的代码\r\nfunction method_put () {\r\n  echo 'PUT请求方法的处理代码';\r\n}\r\n\r\n?>\r\n```\r\n\r\n\r\n操作MySQL数据库\r\n===============\r\n\r\nleiphp中提供了一个静态类 __SQL__ 来操作MySQL数据库：\r\n\r\n* `SQL::connect($server = 'localhost:3306', $username = 'root', $password = '',$database = '');`\r\n连接到数据库，当配置了数据库连接时，leiapp会自动执行此方法来连接到数据库，若你的\r\n程序中已经通过`mysql_connect`来创建了一个数据库连接，可以不用再执行此方法连接数\r\n据库；\r\n\r\n* `SQL::getAll($sql)` 或 `SQL::getData($sql)` 查询SQL，并返回数组格式的结果，\r\n失败返回`FALSE`；\r\n\r\n示例代码数据库如下：\r\n\r\n<table>\r\n<tr><td>titel</td><td>interpret</td><td>jahr</td><td>id</td></tr>\r\n<tr><td>Beauty</td><td>Ryuichi Sakamoto</td><td>1990</td><td>1</td></tr>\r\n<tr><td>Glee</td><td>Groove Armada</td><td>2001</td><td>4</td></tr>\r\n<tr><td>Glee</td><td>Bran Van 3000</td><td>1997</td><td>5</td></tr>\r\n</table>\r\n\r\n```php\r\n//数据库为cdcol,表为cds                       输出如下\r\n$sql = 'SELECT * FROM  `cds` LIMIT 0 , 30';  //title: titel     value: Beauty\r\n$query=SQL::getAll($sql);                    //title: interpret value: Ryuichi Sakamoto\r\n$query_first_array = $query[0];             //title: jahr      value: 1990\r\necho '<br>';                                 //title: id        value: 1\r\nforeach($query_first_array as $k => $v){\r\n  echo 'title: '.$k.' <br>value: '.$v.'<br><br>';\r\n}\r\n```\r\n\r\n* `SQL::getOne($sql)` 或 `SQL::getLine($sql)` 查询SQL，仅返回第一条结果，\r\n失败返回`FALSE`；\r\n\r\n```php\r\n$sql = 'SELECT * FROM  `cds`';  //array(4) {  [\"titel\"]     => string(6) \"Beauty\" \r\n$query=SQL::getOne($sql);       //            [\"interpret\"] => string(16)\"Ryuichi Sakamoto\" \r\nvar_dump($query);               //            [\"jahr\"]      => string(4) \"1990\" \r\n                                //            [\"id\"]        => string(1) \"1\"                 }\r\n```\r\n\r\n* `SQL::update($sql)` 或 `SQL::runSql($sql)` 查询SQL，返回受影响的记录数，一般\r\n用于执行插入或更新操作；\r\n\r\n<table>\r\n<tr><td>titel</td><td>interpret</td><td>jahr</td><td>id</td></tr>\r\n<tr><td>Beauty</td><td>Ryuichi Sakamoto</td><td>1990</td><td>1</td></tr>\r\n<tr><td>Glee</td><td>Groove Armada</td><td>2001</td><td>4</td></tr>\r\n<tr><td>Glee</td><td>Bran Van 3000</td><td>1997</td><td>5</td></tr>\r\n<tr><td>Hello</td><td>My friends</td><td>2015</td><td>2</td></tr>\r\n</table>\r\n\r\n```php\r\n$sql = 'insert into cds(titel, interpret, jahr ,id) values(\"Hello\", \"My friends\", 2015, 2)';\r\n$query = SQL::update($sql);\r\nvar_dump($query);  //int(1) 返回受影响的记录数为1\r\n```\r\n\r\n* `SQL::id()` 或 `SQL::lastId()` 返回最后插入的一条记录的ID；\r\n\r\n```php\r\n$sql = 'insert into cds(titel, interpret, jahr ,id) values(\"Hello\", \"My friends\", 2015, 6)';\r\nSQL::update($sql);\r\n$query = SQL::id();\r\necho $query;\r\n```\r\n\r\n* `SQL::errno()` 返回最后执行的一条SQL语句的出错号\r\n\r\n```php\r\n$sql = 'insert into cds(titel, interpret, jahr ,id) values(\"Hello\", \"My friends, 2015, 10)';//错误的SQL语句\r\nSQL::update($sql);\r\necho SQL::errno();//输出错误号 1064\r\n```\r\n\r\n* `SQL::errmsg()` 返回最后执行的一条SQL语句的出错信息\r\n\r\n```php\r\n$sql = 'insert into cds(titel, interpret, jahr ,id) values(\"Hello\", \"My friends, 2015, 10)';//错误的SQL语句\r\nSQL::update($sql);\r\necho SQL::errmsg();//输出错误信息 You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '\"My friends, 2015, 10)' at line 1\r\n```\r\n\r\n* `SQL::escape($str)` 返回安全的SQL字符串\r\n\r\n```php\r\n$escape=\"Da'Silva\";          //放入要转义的字符串。\r\n$r = SQL::escape($escape);   //编码的字符是 NUL（ASCII 0）、\\n、\\r、\\、'、\" 和 Control-Z。\r\necho $r;                     //输出Da\\'Silva\r\n$sql = \"insert into cds(titel, interpret, jahr ,id) values('{$r}', 'My friends', 2015, 10)\";\r\nSQL::update($sql);           //不经过函数转义则报错\r\n```\r\n\r\n更简便的数据库操作：\r\n\r\n* `SQL::getAll($table, $where)` 查询所有记录，其中$table是表名，$where是一个条件\r\n数组，如：array('id' => 1)\r\n```php\r\n$prarm = array('id' => 4, 'jahr' => 2001);  //array(1) {[0] => array(4) {  \r\n                                            //[\"titel\"]     => string(33)\"Goodbye Country (Hello Nightclub)\" \r\n$query = SQL::getAll('cds', $prarm);        //[\"interpret\"] => string(13)\"Groove Armada\" \r\n//var_dump($query);                         //[\"jahr\"]      => string(4) \"2001\" \r\necho $query2[0]['titel'];                   //[\"id\"]        => string(1) \"4\"                              }}\r\n                                            //输出 Goodbye Country (Hello Nightclub)\r\n```\r\n* `SQL::getOne($table, $where)` 查询一条记录\r\n\r\n```php\r\n$prarm = array('id' => 4, 'jahr' => 2001);\r\n$query = SQL::getOne('cds', $prarm);\r\nvar_dump($query);\r\n```\r\n\r\n* `SQL::update($table, $where, $update)` 更新记录并返回受影响的记录数，其中\r\n$update是要更新的数据数组，如：array('name' => 'haha')\r\n\r\n更改前的表\r\n<table>\r\n<tr><td>Glee</td><td>Groove Armada</td><td>2001</td><td>4</td></tr>\r\n</table>\r\n\r\n更改后的表\r\n<table>\r\n<tr><td>Hello</td><td>My friends</td><td>2015</td><td>2</td></tr>\r\n</table>\r\n\r\n```php\r\n$prarm = array('titel' => 'Hello', 'interpret' => 'My friends', 'jahr' => '2015', 'id' => '2');\r\n                                                  //$update带要更新值的数组\r\n$prarm_where = array('id'=>'4');                  //$where 带判断值所在列的数组\r\n$query = SQL::update('cds',$prarm_where,$prarm);  //id为4的列，里面的值全部被重新更新了一遍\r\n```\r\n\r\n* `SQL::insert($table, $data)` 插入一条记录并返回其ID，其中$data是一个数组，\r\n如：array('name' => 'haha', 'age' => 20)\r\n\r\n```php\r\n$prarm = array('titel' => 'Hello', 'interpret' => 'My friends', 'jahr' => '2015', 'id' => '8');\r\n$query = SQL::insert('cds',$prarm);  //插入了一个新的列\r\n```\r\n\r\n* `SQL::delete($table, $where)` 删除记录\r\n\r\n条件格式：\r\n\r\n* 普通：`array('a' => 1, 'b' => 2)` 相当于 `a=1 AND b=2`\r\n\r\n* 指定连接操作符：`array('link' => 'OR', 'a' => 1, 'b' => 2)` 相当于 `a=1 OR b=2`\r\n\r\n* 指定比较操作符：`array('a' => array('>' => 2))` 相当于 `a>2`\r\n\r\n* 同一个字段多个条件：`array('a' => array('>' => 2, '<' => 5))` 相当于\r\n`(a>2 AND a < 5)`\r\n\r\n* 指定多个条件的连接操作符：`array('a' => array('link' => 'OR', '>' => 2, '<' => 5))` \r\n相当于 `(a>2 OR a < 5)`\r\n\r\n\r\n上传文件操作\r\n===============\r\n\r\nleiphp中提供了一个静态类 __UPLOAD__ 来操作上传文件：\r\n\r\n* `UPLOAD::get($filename)` 返回指定名称的上传文件信息，该名称为`<form>`表单中的\r\n`<input type=\"file\">`中的**name**值，该返回值为一个数组，包含以下项： __name__ \r\n（名称）， __type__ （MIME类型）， __size__ （大小）， \r\n__tmp_name__ （临时文件名）；\r\n\r\n* `UPLOAD::move($file, $target)` 移动上传的文件到指定位置，第一个参数为\r\n`UPLOAD::get($filename)`的返回值，第二个参数为目标文件名；\r\n\r\n\r\n调试信息操作\r\n=============\r\n\r\nleiphp中提供了一个静态类 __DEBUG__ 来操作调试信息，当定义了常量`APP_DEBUG`时，\r\n会在页面底部输出调试信息：\r\n\r\n* `DEBUG::put($msg = '', $title = '')` 输出调试信息\r\n\r\n* `DEBUG::get()` 取调试信息\r\n\r\n* `DEBUG::clear()` 清除所有调试信息\r\n\r\n\r\n应用相关操作\r\n=============\r\n\r\nleiphp中提供了一个静态类 __APP__ 来进行应用相关的操作，及一些公共函数：\r\n\r\n* `APP::encryptPassword ($password)` 加密密码，返回一个加盐处理后的MD5字符串，\r\n如：`FF:15855D447208A6AB4BD2CC88D4B91732:83`；\r\n\r\n* `APP::validatePassword ($password, $encrypted)` 验证密码，第一个参数为待验证的\r\n密码，第二个参数为`APP::encryptPassword ($password)`返回的字符串，\r\n返回`TRUE`或`FALSE`；\r\n\r\n* `APP::dump($var)` 打印变量结构，一般用于调试；\r\n\r\n* `APP::showError($msg)` 显示出错信息\r\n\r\n* `APP::load($filename)` 载入依赖的php文件，若不指定后缀名，会自动加上`.php`，\r\n默认以当前php文件为根目录，若文件名以`/`开头，则以常量`APP_ROOT`定义的应用目录\r\n作为根目录；\r\n\r\n* `APP::sendJSON($data)` 返回JSON格式数据\r\n\r\n* `APP::sendError($msg, $data = array())` 返回JSON格式的出错信息：`{\"error\":\"msg\"}`\r\n\r\n* `APP::authEncode($string, $key, $expirey)` 加密账户验证信息，可指定过期时间\r\n\r\n* `APP::authDecode($string, $key)` 加密账户验证信息\r\n\r\n* `APP::getTemplate($name, $locals)` 载入模板文件，若不指定后缀名，会\r\n自动加上`.html`，以常量`APP_TEMPLATE_ROOT`定义的模板目录作为根目录，模板文件实际\r\n上为php程序文件，第二个参数为模板中可用的变量，在模板中通过`$locals`来读取（若\r\n无命名冲突也可以直接使用键名），返回渲染后的内容\r\n\r\n* `APP::setLocals($name, $value)` 设置模板变量\r\n\r\n* `APP::getLocals($name)` 取模板变量值\r\n\r\n* `APP::render($name, $locals, $layout = '')` 自动为`$locals`加上用\r\n`APP::setLocals()`设置的变量，并渲染模板。如果指定了视图模板`$layout`，则需要在\r\n视图模板中通过`$body`变量来获取模板内容。\r\n\r\n* `APP::init()` 初始化leiphp；\r\n\r\n* `APP::end()` 提前退出\r\n\r\n自动路由\r\n===========\r\n\r\nleiphp中提供了一个静态类 __ROUTER__ 来进行路由相关的操作：\r\n\r\n* `ROUTER::register($path, $function, $is_preg = false)` 注册中间件，其中`$path`\r\n为路径前缀，`$function`为要执行的函数，如果`$is_preg`为`true`表示`$path`是一个\r\n正则表达式\r\n\r\n* `ROUTER::run($dir, $path)` 执行自动路由。其中`$dir`是要自动加载的PHP文件所在\r\n的目录，以应用目录`APP_ROOT`中定义的目录为根目录，默认为`action`目录，`$path`是\r\n当前请求的路径，默认为`$_GET['__path__']`\r\n\r\n示例：\r\n\r\n应用统一入口文件：index.php\r\n\r\n```php\r\n<?php\r\nrequire('config.inc.php');\r\nROUTER::run('action', @$_GET['__path__']);\r\n?>\r\n```\r\n\r\n需要配置服务器的URL Rewrite，比如将 `/app/(.*)` 的所有请求转到\r\n`/app/index.php?__path__=$1`\r\n\r\nApache的配置示例：\r\n\r\n```\r\nRewriteCond %{REQUEST_FILENAME} !-f\r\nRewriteCond %{REQUEST_FILENAME} !-d\r\nRewriteRule ^app/(.*)$ /app/index.php?%{QUERY_STRING}&__path__=$1 [L]\r\n```\r\n\r\nNginx的配置示例：\r\n\r\n```lua\r\nif (!-e $request_filename) {\r\n  rewrite \"^/app/(.*)\" \"/app/index.php?%{QUERY_STRING}&__path__=$1\" last;\r\n}\r\n```\r\n\r\nSAE的配置示例：\r\n\r\n```yaml\r\nhandle:\r\n - rewrite: if(!is_dir() && !is_file() && path~\"^app/(.*)\") goto \"app/index.php?%{QUERY_STRING}&__path__=$1\"\r\n```\r\n\r\n当请求 `/app/my/action` 时，会自动执行文件 `/action/my/action.php`\r\n\r\n如请求 `/app/my/action/` ，则自动执行文件 `/action/my/action/index.php`\r\n\r\n\r\n授权\r\n============\r\n\r\n基于MIT协议发布。","google":"UA-70403990-1","note":"Don't delete this file! It's used internally to help with page regeneration."}